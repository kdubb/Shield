name: PR Report

on:
  workflow_run:
    workflows: ["PR Buid/Test"]
    types: [completed]

jobs:
  
  sonar-scan:

    runs-on: macos-12

    if: github.event.workflow_run.conclusion == 'success'

    steps:

    - name: Install Tools
      run: |
        brew install sonar-scanner
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - name: Download Build
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let buildResultsArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "build-results"
          })[0];
          let buildResultsDownload = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: buildResultsArtifact.id,
            archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build-results.tar.gz`, Buffer.from(buildResultsDownload.data));

    - name: Extract Build Results
      run: tar -xzf build-results.tar.gz

    - name: Read PR Number
      id: pr_number
      uses: juliangruber/read-file-action@v1
      with:
        path: .build/pr_number

    - name: Get PR Data
      uses: octokit/request-action@v2.x
      id: pr_data
      with:
        route: GET /repos/{full_name}/pulls/{number}
        full_name: ${{ github.event.repository.full_name }}
        number: ${{ steps.pr_number.outputs.content }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout PR
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.workflow_run.head_repository.full_name }}
        ref: ${{ github.event.workflow_run.head_sha }}
        fetch-depth: 0

    - name: Checkout Base Branch
      run: |
        git remote add upstream ${{ github.event.repository.clone_url }}
        git fetch upstream
        git checkout -B ${{ fromJson(steps.pr_data.outputs.data).base.ref }} upstream/${{ fromJson(steps.pr_data.outputs.data).base.ref }}
        git checkout ${{ github.event.workflow_run.head_branch }}
        git clean -ffdx && git reset --hard HEAD

    - name: Sonar Scanner
      run: |
        sonar-scanner -Dsonar.scm.revision=${{ github.event.workflow_run.head_sha }} -Dsonar.pullrequest.key=${{ fromJson(steps.pr_data.outputs.data).number }} -Dsonar.pullrequest.branch=${{ fromJson(steps.pr_data.outputs.data).head.ref }} -Dsonar.pullrequest.base=${{ fromJson(steps.pr_data.outputs.data).base.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  
  report-test-results:

    runs-on: macos-12
    
    permissions:
      checks: write

    steps:

    - name: Download Test Result Archives
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let testResultArchiveArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name.startsWith("test-results")
          });
          let fs = require('fs');
          await Promise.all(
            testResultArchiveArtifacts.map(async (artifact) => {
              let testResultArchiveDownload = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.tar.gz`, Buffer.from(testResultArchiveDownload.data));
            })
          );

    - name: Extract Test Result Archives
      run: |
        tar -xzf test-results-macos.tar.gz || true
        tar -xzf test-results-ios.tar.gz || true
        tar -xzf test-results-tvos.tar.gz || true
        tar -xzf test-results-watchos.tar.gz || true

    - name: Report macOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          sha: ${{ github.event.workflow_run.head_sha }}
          title: Test Results macOS
          path: ./TestResults/macOS.xcresult

    - name: Report iOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          sha: ${{ github.event.workflow_run.head_sha }}
          title: Test Results iOS
          path: ./TestResults/iOS.xcresult

    - name: Report tvOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          sha: ${{ github.event.workflow_run.head_sha }}
          title: Test Results tvOS
          path: ./TestResults/tvOS.xcresult

    - name: Report watchOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          sha: ${{ github.event.workflow_run.head_sha }}
          title: Test Results watchOS
          path: ./TestResults/watchOS.xcresult
