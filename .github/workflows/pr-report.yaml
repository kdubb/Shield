name: PR Report

on:
  workflow_run:
    workflows: ["PR Buid/Test"]
    types: [completed]

jobs:
  
  sonar-scan:

    runs-on: macos-12

    if: github.event.workflow_run.conclusion == 'success'

    steps:

    - name: Debug
      uses: actions/github-script@v6
      with:
        script: console.log(JSON.stringify(context, null, 2))

    - name: Install Tools
      run: |
        brew install sonar-scanner
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: 1

    - name: Download Build
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let buildResultsArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "build-results"
          })[0];
          let buildResultsDownload = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: buildResultsArtifact.id,
            archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build-results.tar.gz`, Buffer.from(buildResultsDownload.data));

    - name: Extract Build Results
      run: tar -xzf build-results.tar.gz

    - name: Get PR Info
      uses: potiuk/get-workflow-origin@v1_5
      id: pr_info
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        sourceRunId: ${{ github.event.workflow_run.id }}

    - name: Checkout PR
      uses: actions/checkout@v3
      with:
        repository: ${{ steps.pr_info.outputs.sourceHeadRepo }}
        ref: ${{ steps.pr_info.outputs.mergeCommitSha }}
        fetch-depth: 0

    - name: Sonar Scanner
      run: |
        sonar-scanner -Dsonar.scm.revision=${{ steps.pr_info.outputs.sourceHeadSha }} -Dsonar.pullrequest.key=${{ steps.pr_info.outputs.pullRequestNumber }} -Dsonar.pullrequest.branch=${{ steps.pr_info.outputs.sourceHeadBranch }} -Dsonar.pullrequest.base=${{ steps.pr_info.outputs.targetBranch }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  
  report-test-results:

    runs-on: macos-12
    
    permissions:
      checks: write

    steps:

    - name: Get PR Info
      uses: potiuk/get-workflow-origin@v1_5
      id: pr_info
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        sourceRunId: ${{ github.event.workflow_run.id }}

    - name: Download Test Result Archives
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let testResultArchiveArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name.startsWith("test-results")
          });
          let fs = require('fs');
          await Promise.all(
            testResultArchiveArtifacts.map(async (artifact) => {
              let testResultArchiveDownload = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.tar.gz`, Buffer.from(testResultArchiveDownload.data));
            })
          );

    - name: Extract Test Result Archives
      run: |
        tar -xzf test-results-macos.tar.gz || true
        tar -xzf test-results-ios.tar.gz || true
        tar -xzf test-results-tvos.tar.gz || true
        tar -xzf test-results-watchos.tar.gz || true

    - name: Report macOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          repo: ${{ steps.pr_info.outputs.sourceHeadRepo }} 
          sha: ${{ steps.pr_info.outputs.targetCommitSha }}
          title: Test Results macOS
          path: ./TestResults/macOS.xcresult
          upload-bundles: never
          show-code-coverage: false

    - name: Report iOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          repo: ${{ steps.pr_info.outputs.sourceHeadRepo }} 
          sha: ${{ steps.pr_info.outputs.targetCommitSha }}
          title: Test Results iOS
          path: ./TestResults/iOS.xcresult
          upload-bundles: never
          show-code-coverage: false

    - name: Report tvOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          repo: ${{ steps.pr_info.outputs.sourceHeadRepo }} 
          sha: ${{ steps.pr_info.outputs.targetCommitSha }}
          title: Test Results tvOS
          path: ./TestResults/tvOS.xcresult
          upload-bundles: never
          show-code-coverage: false

    - name: Report watchOS Test Results
      uses: kdubb/xcresulttool@v1
      continue-on-error: true
      with:
          repo: ${{ steps.pr_info.outputs.sourceHeadRepo }} 
          sha: ${{ steps.pr_info.outputs.targetCommitSha }}
          title: Test Results watchOS
          path: ./TestResults/watchOS.xcresult
          upload-bundles: never
          show-code-coverage: false
